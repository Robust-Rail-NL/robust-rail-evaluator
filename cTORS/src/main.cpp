#include <iostream>
#include "Engine.h"

int main()
{
	// LocationEngine engine("../data/Demo/HIP_input");
	LocationEngine engine("/home/roland/Documents/REIT/LPT_Robust_Rail_project/cTORS_new/ctors/data/Demo/main_test");
	
	const Location& location = engine.GetLocation();
	const vector<Track*>& tracks = location.GetTracks();

	cout << "\n Location \n";

	for(int i=0; i<tracks.size(); i++)
	{
		cout << "id : " << tracks[i]->id << "\n";
		if(tracks[i]->type == TrackPartType::Railroad)
		{
			cout << "Type : RailRoad" << "\n";

		}
		cout << "name : " << tracks[i]->name << "\n";

	}

	// auto &scenario = engine.GetScenario("../data/Demo/HIP_input/scenario.json");
	auto &scenario = engine.GetScenario("/home/roland/Documents/REIT/LPT_Robust_Rail_project/cTORS_new/ctors/data/Demo/main_test/scenario.json");

	scenario.PrintScenarioInfo();
	
	State *state = engine.StartSession(scenario);
	cout << "\nBeginning of session\n";
	engine.Step(state);
	while (true)
	{
		try
		{
			state->PrintStateInfo();
			auto &actions = engine.GetValidActions(state);
			cout << "[T = " + to_string(state->GetTime()) + "]\tChoosing from " << actions.size() << " actions.\n";
			if (actions.size() == 0)
				break;
			const Action *a;
			if (actions.size() == 1)
			{
				a = actions.front();
				cout << "----------------------------------------------------------\n";
				cout << "Action : " << a->toString() << "\n";
				cout << "----------------------------------------------------------\n";
			}	
			else
			{
				int i = 0;
				for (auto a : actions)
				{
					cout << to_string(i) + ":\t" + a->toString() + ".\n";
					i++;
				}
				cout << "Which action?\n";
				while (!(cin >> i) || i >= actions.size())
				{
					cin.clear();
					cin.ignore(numeric_limits<streamsize>::max(), '\n');
					cout << "Invalid input.  Try again: Which action?\n";
				}
				a = *next(actions.begin(), i);
			}
			engine.ApplyActionAndStep(state, a);
		}
		catch (ScenarioFailedException e)
		{
			cout << "Scenario failed.\n";
			break;
		}
	}
	PBRun pb_run;
	engine.GetResult(state)->Serialize(engine, &pb_run);
	engine.EndSession(state);
	cout << "End of session\n";
	string out;
	cin >> out;
}

// auto& actions = engine.GetValidActions(state);
// provides a list of valid actions, the actions are generated by the ActionGenerators
// in main(): LocationEngine() -> ActionManager() -> AddGenerators(): these are called
// when generating the actions for the given state, same the ActionManager() initiates
// validators AddValidators() which are used to check the validity of a given action
// in a given state "IsValid(state, a);"