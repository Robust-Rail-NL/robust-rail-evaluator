// This program has been developed by students from the bachelor Computer Science at Utrecht University within the Software and Game project course 2016 semester 2 & 2017 semester 2
// Â©Copyright Utrecht University (Department of Information and Computing Sciences)
syntax = "proto3";
package tors_proto;

import "Task.proto";
import "Vehicles.proto";
import "ActionType.proto";

// Generic Action proto
message Action {
    // | Generic properties
    // Type of the action
    ActionType type = 1;
    // Involved shunting units
    repeated string shuntingUnitUuids = 2;
    // Duration of the action
    int32 duration = 3;
    // Reward of the action
    int32 reward = 4;
    // Involved employees
    repeated int32 employeeIds = 5;
    // Involved tracks
    repeated int32 trackIds = 6;
    // String representation
    string description = 14;

    // | Type=specific properties
    oneof extra {
        // No extra parameters
        NA na = 7;
        // Action-specific parameters
        ArriveInfo arrive = 8;
        CombineInfo combine = 9;
        ServiceInfo service = 10;
        MoveInfo move = 11;
        ExitInfo exit = 12;
        SplitInfo split = 13;
    }
}

// Empty object for actions that do not need extra information
message NA {}

// Information for an arrive action
message ArriveInfo {
    // Id of incoming train
    int32 incomingTrainId = 1;
}

// Information for an exit action
message ExitInfo {
    // Id of the matched outgoing train
    int32 outgoingTrainId = 1;
}

// Information for a combine action
message CombineInfo {
    // UUIDs of the combining shunting units
    ShuntingUnit frontShuntingUnit = 1;
    ShuntingUnit rearShuntingUnit = 2;

    // UUID of the new shunting unit
    ShuntingUnit newShuntingUnit = 3;

    // Position on the track counting from the A-side
    int32 position = 4;
}

// Information for a naive movement action
message MoveInfo {
    // Side the shunting units get put on on the destination track
    int32 destinationSideTrackId = 1;
}

// Information for the service action
message ServiceInfo {
    // The ID of the train unit in question
    int32 trainUnitId = 1;
    // The task to be performed
    Task task = 2;
    // Facility where the task is performed
    int32 facilityId = 3;
    // Time the task is performed at
    int64 time = 4;
}

// Information for the split action
message SplitInfo {
    // Position on the track (counting from the A-side)
    int32 position = 1;
    // After which train unit index the shunting unit is split
    int32 splitAt = 2;
    // The shunting unit before the split
    ShuntingUnit shuntingUnit = 3;
    // The first new shunting unit
    ShuntingUnit firstNewShuntingUnit = 4;
    // The second new shunting unit
    ShuntingUnit secondNewShuntingUnit = 5;
}
